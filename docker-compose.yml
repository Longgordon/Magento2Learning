version: '2.1'
services:
  db:
    hostname: db.magento2.docker
    image: 'mariadb:10.6'
    shm_size: 2gb
    environment:
      - MYSQL_ROOT_PASSWORD=magento2
      - MYSQL_DATABASE=magento2
      - MYSQL_USER=magento2
      - MYSQL_PASSWORD=magento2
    ports:
      - '33666:3306'  # Map port 33666 on host to port 3306 on container
    volumes:
      - 'magento-magento-sync:/app:nocopy'
      - 'magento-magento-db:/var/lib/mysql'
    healthcheck:
      test: 'mysqladmin ping -h localhost -pmagento2'
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      magento:
        aliases:
          - db.magento2.docker

  redis:
    hostname: redis.magento2.docker
    image: 'redis:7.0'
    ports:
      - '6379:6379'  # Map port 6379 on host to port 6379 on container
    volumes:
      - 'magento-magento-sync:/app:nocopy'
    sysctls:
      net.core.somaxconn: 1024
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
    healthcheck:
      test: 'redis-cli ping || exit 1'
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      magento:
        aliases:
          - redis.magento2.docker

  opensearch:
    hostname: opensearch.magento2.docker
    image: 'magento/magento-cloud-docker-opensearch:2.4-1.3.7'
    ports:
      - '9200:9200'  # Map port 9200 on host to port 9200 on container
    environment:
      - cluster.name=docker-cluster
      - discovery.type=single-node
      - discovery.seed_hosts=opensearch
      - bootstrap.memory_lock=true
      - DISABLE_SECURITY_PLUGIN=true
    networks:
      magento:
        aliases:
          - opensearch.magento2.docker

  fpm:
    hostname: fpm.magento2.docker
    image: 'magento/magento-cloud-docker-php:7.4-fpm-1.3.7'
    extends: generic
    volumes:
      - 'magento-magento-sync:/app:nocopy'
    networks:
      magento:
        aliases:
          - fpm.magento2.docker
    depends_on:
      db:
        condition: service_healthy
    ports:
      - '9000:9000'  # Map port 9000 on host to port 9000 on container

  web:
    hostname: web.magento2.docker
    image: 'magento/magento-cloud-docker-nginx:1.24-1.3.7'
    extends: generic
    volumes:
      - 'magento-magento-sync:/app:nocopy'
    environment:
      - WITH_XDEBUG=0
      - NGINX_WORKER_PROCESSES=1
      - NGINX_WORKER_CONNECTIONS=1024
    networks:
      magento:
        aliases:
          - web.magento2.docker
    depends_on:
      fpm:
        condition: service_started
    ports:
      - '8999:80'  # Map port 8999 on host to port 80 on container

  varnish:
    hostname: varnish.magento2.docker
    image: 'magento/magento-cloud-docker-varnish:6.6-1.3.7'
    ports:
      - '6081:6081'  # Map port 6081 on host to port 6081 on container
    networks:
      magento:
        aliases:
          - varnish.magento2.docker
    depends_on:
      web:
        condition: service_started

  tls:
    hostname: tls.magento2.docker
    image: 'magento/magento-cloud-docker-nginx:1.24-1.3.7'
    extends: generic
    networks:
      magento:
        aliases:
          - magento2.docker
    environment:
      - NGINX_WORKER_PROCESSES=1
      - NGINX_WORKER_CONNECTIONS=1024
      - UPSTREAM_HOST=varnish
      - UPSTREAM_PORT=6081
    ports:
      - '8080:80'  # Map port 8080 on host to port 80 on container
      - '4434:443' # Map port 4434 on host to port 443 on container
    depends_on:
      varnish:
        condition: service_started

  generic:
    hostname: generic.magento2.docker
    image: 'magento/magento-cloud-docker-php:7.4-cli-1.3.7'
    env_file: ./.docker/config.env
    environment:
      - MAGENTO_RUN_MODE=developer
      - 'PHP_EXTENSIONS=bcmath bz2 calendar exif gd gettext intl mysqli pcntl pdo_mysql soap sockets sysvmsg sysvsem sysvshm opcache zip xsl sodium redis'

  build:
    hostname: build.magento2.docker
    image: 'magento/magento-cloud-docker-php:7.4-cli-1.3.7'
    extends: generic
    volumes:
      - 'magento-magento-sync:/app:nocopy'
    networks:
      magento-build:
        aliases:
          - build.magento2.docker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy

  deploy:
    hostname: deploy.magento2.docker
    image: 'magento/magento-cloud-docker-php:7.4-cli-1.3.7'
    extends: generic
    volumes:
      - 'magento-magento-sync:/app:nocopy'
    networks:
      magento:
        aliases:
          - deploy.magento2.docker
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      opensearch:
        condition: service_healthy

volumes:
  magento-magento-db: {  }
  magento-magento-sync: {  }

networks:
  magento:
    driver: bridge
  magento-build:
    driver: bridge
